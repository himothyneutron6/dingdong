
Practical 1 Array Operations

1. Write C++ program to insert elements in array.
Code:

#include<iostream.h>
#include<conio.h>
//using namespace std;
int main()
{
clrscr();
int arr[50], i, elem, pos, tot;
cout<<"Enter the Size for Array: ";
cin>>tot;
cout<<"Enter "<<tot<<" Array Elements: ";
for(i=0; i<tot; i++)
cin>>arr[i];
cout<<"\n Enter Element to Insert: ";
cin>>elem;
cout<<"At What Position ? ";
cin>>pos;
for(i=tot; i>=pos; i--)
arr[i] = arr[i-1];
arr[i] = elem;
tot++;
cout<<"\nThe New Array is:\n";
for(i=0; i<tot; i++)
cout<<arr[i]<<" ";
cout<<endl;
getch();
return 0;
}


2. Write C++ program to delete elements from array.
Code:

#include <iostream.h>
#include<conio.h>
//using namespace std;
int main()
{
clrscr();
int n;
cout<<"Enter the size of the array:";
cin>>n;
int arr[50], i, pos;
cout <<"\n Enter the " << n << " elements of the array: ";
for(i=0; i<n; i++)
{
cin >> arr[i];
}
//Printing the original array before deletion
cout << "\n The " << n << " elements of the array, before deletion are : ";
for(i=0; i<n; i++)
{
cout << arr[i] << " ";
}
cout <<"\n Enter the position of the element to be deleted : ";
cin >> pos;
for (i = pos; i <= n-1; i++)
{
arr[i] = arr[i + 1];
}
cout << " \nThe " << n-1 << " elements of the array, after deletion are : ";
for(i=0; i<n-1; i++)
{
cout << arr[i] << " ";
}
getch();
return 0;
}


3. Write C++ program to implement Binary Search Algorithm.
Code:

#include<iostream.h>
#include<conio.h>
int main()
{
clrscr();
int i, arr[10], num, first, last, middle;
cout<<"\nEnter elements in ascending order: ";
for(i=0; i<9; i++)
cin>>arr[i];
cout<<"\nEnter Element to be Searched: ";
cin>>num;
first = 0;
last = 8;
while(first <= last)
{
middle=(first+last)/2;
if(num>arr[middle])
first = middle+1;
else if(num==arr[middle])
{
cout<<"\nThe number "<<num<<" found at index array["<<middle<<"]";
break;
}
else
last = middle-1;
}
if(first>last)
cout<<"\nThe number "<<num<<" is not found in given Array";
cout<<endl;
getch();
return 0;
}

4. Write C++ program to implement Merge Sort Algorithm.
Code:

#include <iostream.h>
#include<conio.h>

void merge(int *,int, int , int );
void merge_sort(int *arr, int low, int high)
{
int mid;
if (low < high){
//divide the array at mid and sort independently using merge sort
mid=(low+high)/2;
merge_sort(arr,low,mid);
merge_sort(arr,mid+1,high);
//merge or conquer sorted arrays
merge(arr,low,high,mid);
}
}
// Merge sort
void merge(int *arr, int low, int high, int mid)
{
int i, j, k, c[10];
i = low;
k = low;
j = mid + 1;
while (i <= mid && j <= high)
{
if (arr[i] < arr[j])
{
c[k] = arr[i];
k++;
i++;
}
else
{
c[k] = arr[j];
k++;
j++;
}
}
while (i <= mid)
{
c[k] = arr[i];
k++;
i++;
}
while (j <= high)
{
c[k] = arr[j];
k++;
j++;
}
for (i = low; i < k; i++)
{
arr[i] = c[i];
}
}
// read input array and call mergesort
int main()
{
clrscr();
int myarray[30], num;

cout<<"Enter number of elements to be sorted:";
cin>>num;
cout<<"Enter "<<num<<" elements to be sorted:";
for (int i = 0; i < num; i++) { cin>>myarray[i];
}
merge_sort(myarray, 0, num-1);
cout<<"Sorted array\n";
for ( i = 0; i < num; i++)
{
cout<<myarray[i]<<"\t";
}
getch();
return 0;
}

5. Write C++ program to implement Quick Sort Algorithm.
Code:

#include<iostream.h>
#include<conio.h>
void swap(int *a,int *b)
{
int t=*a;
*a=*b;
*b=t;
}

void printArray(int array[],int size)
{
int i;
for(i=0;i<size;i++)
{
cout<<array[i]<<" ";
}
cout<<endl;
}
int partition(int array[],int low,int high)
{
int pivot=array[high];
int i=(low-1);
for(int j=low;j<high;j++)
{
if(array[j]<=pivot)
{
i++;
swap(&array[i],&array[j]);
}
}
swap(&array[i+1],&array[high]);
return(i+1);
}
void quicksort(int array[],int low,int high)
{
if(low<high)
{
int pi=partition(array,low,high);
quicksort(array,low,pi-1);
quicksort(array,pi+1,high);
}
}
int main()
{
clrscr();
int data[20],num;
cout<<"Enter number of elements: ";
cin>>num;
cout<<"\nEnter "<<num<<" elements: ";
for(int i=0;i<num;i++)
{
cin>>data[i];
}
cout<<"\nUnsorted Array: ";
printArray(data,num);
quicksort(data,0,num-1);
cout<<"Sorted Array: ";
printArray(data,num);
getch();
return 0;
}



Practical 2 : Array Operations 

1. Write a program to store the elements in 1D array and perform the
operations like searching, sorting and reversing the elements. [Menu
Driven]
Code:

#include<iostream.h>
#include<conio.h>
int size,val;
void disp(int size);
void sort(int size);
void reverse(int size);

void search(int val,int size);
int arr[20];
int main()
{
clrscr();
int i,ch;
cout<<"Enter the size of array: ";
cin>>size;
cout<<"Enter the Array Elements: ";
for(i=0;i<size;i++)
{
cin>>arr[i];
}
cout<<"\n***** Main Menu*****\n";
cout<<"1. Display\n";
cout<<"2. Sorting\n";
cout<<"3. Reversing\n";
cout<<"4. Searching\n";
cout<<"Enter your Choice: ";
cin>>ch;
switch(ch)
{
case 1:disp(size);
break;
case 2:sort(size);
break;
case 3:reverse(size);
break;
case 4:cout<<"Enter value to be search: ";
cin>>val;
search(val,size);
break;
}
getch();
return 0;
}
void search(int val,int size)
{
int i;
for(i=0;i<size;i++)
{
if(arr[i]==val)
{
cout<<"Value is found at position:"<<i;
break;
}
}
if(i==size)
{
cout<<"Value is not found";
}
}
void disp(int size)
{
int i;
for(i=0;i<size;i++)
{

cout<<arr[i]<<" ";
}
}
void sort(int size)
{
int i,j;
for(i=0;i<size;i++)
{
for(j=0;j<size-i-1;j++)
{
if(arr[j]>arr[j+1])
{
int temp;
temp=arr[j];
arr[j]=arr[j+1];
arr[j+1]=temp;
}
}
}
cout<<"Sorted Array:\n";
for(i=0;i<size;i++)
{
cout<<"\n"<<arr[i];
}
}
void reverse(int size)
{
int i,j,temp;
j=size-1;
i=0;
while(i<j)
{
temp=arr[i];
arr[i]=arr[j];
arr[j]=temp;
i++;
j--;
}
cout<<"Reverse Order: \n";
for(i=0;i<size;i++)
{
cout<<arr[i]<<" ";
}
}


2. Read the two arrays from the user and merge them and display the
elements in sorted order. [Menu Driven]
Code:

#include<iostream.h>
#include<conio.h>
int main()
{
clrscr();
int arr1[10],arr2[10],arrMerge[20],size1,size2,i,k;
cout<<"Enter the Size for First Array: ";
cin>>size1;
cout<<"Enter "<<size1<<" elements for the First Array: ";
for(i=0;i<size1;i++)
{
cin>>arr1[i];
arrMerge[i]=arr1[i];
}
k=i;
cout<<"Enter the Size for Second Array: ";
cin>>size2;
cout<<"Enter "<<size2<<" elements for the First Array: ";
for(i=0;i<size2;i++)
{
cin>>arr2[i];
arrMerge[k]=arr2[i];
k++;
}
cout<<"Merged Array: \n";
for(i=0;i<k;i++)
{
cout<<arrMerge[i]<<" ";
}
cout<<endl;
getch();
return 0;
}


Code:
#include<iostream.h>
#include<conio.h>

int main()
{
clrscr();

int arr1[10], arr2[10], arrMerge[20], size1, size2, i, k;

cout << "Enter the Size for First Array: ";
cin >> size1;

cout << "Enter " << size1 << " elements for the First Array: ";
for(i = 0; i < size1; i++)
{
cin >> arr1[i];
arrMerge[i] = arr1[i];
}
k = i;

cout << "Enter the Size for Second Array: ";
cin >> size2;

cout << "Enter " << size2 << " elements for the Second Array: ";
for(i = 0; i < size2; i++)
{
cin >> arr2[i];
arrMerge[k] = arr2[i];
k++;
}

// Sorting the merged array
for(i = 0; i < k; i++)
{
for(int j = i + 1; j < k; j++)
{

if(arrMerge[i] > arrMerge[j])
{
// Swap elements if they are in the wrong order
int temp = arrMerge[i];
arrMerge[i] = arrMerge[j];
arrMerge[j] = temp;
}
}
}

cout << "Merged and Sorted Array: \n";
for(i = 0; i < k; i++)
{
cout << arrMerge[i] << " ";
}
cout << endl;

getch();
return 0;
}

3. Write a program to perform the Matrix Addition, Multiplication and
Transpose Operation. [Menu Driven]
Code:

#include<iostream.h>
#include<conio.h>
void multiplication()
{
int mat1[3][3],mat2[3][3],mat3[3][3],i,j;
cout<<"Enter the Elements of Matrix 1: ";
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
cin>>mat1[i][j];
}
}
cout<<"Enter the Elements of Matrix 2: ";
for(i=0;i<3;i++)

{
for(j=0;j<3;j++)
{
cin>>mat2[i][j];
}
}
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
mat3[i][j]=0;
for(int k=0;k<3;k++)
{
mat3[i][j]+=mat1[i][k]*mat2[k][j];
}
}
}
cout<<"The Matrix Multiplication is:\n ";
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
cout<<mat3[i][j]<<" ";
}
cout<<"\n";
}
}
void addition()
{
int mat1[3][3],mat2[3][3],mat3[3][3],i,j;
cout<<"Enter the Elements of Matrix 1: ";
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
cin>>mat1[i][j];
}
}
cout<<"Enter the Elements of Matrix 2: ";
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
cin>>mat2[i][j];
}
}
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
mat3[i][j]=mat1[i][j]+mat2[i][j];
}
}
cout<<"The Matrix Addition is: \n";
for(i=0;i<3;i++)
{

for(j=0;j<3;j++)
{
cout<<mat3[i][j]<<" ";
}
cout<<"\n";
}
}
void transpose()
{
int mat1[3][3],trans[3][3],i,j;
cout<<"Enter elements of matrix: \n";
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
cin>>mat1[i][j];
}
}
cout<<"\n Matrix Entered: \n";
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
cout<<mat1[i][j]<<" ";
}
cout<<"\n";
}
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
trans[j][i]=mat1[i][j];
}
}
cout<<"Transpose Matrix: \n";
for(i=0;i<3;i++)
{
for(j=0;j<3;j++)
{
cout<<trans[i][j]<<" ";
}
cout<<"\n";
}
}
void main()
{
int ch;
clrscr();
cout<<"*****Main Menu*****\n";
cout<<"1.Addition \n2.Multiplication \n3.Transpose";
cout<<"\n Enter your choice:";
cin>>ch;
switch(ch)
{
case 1:
addition();

break;
case 2:
multiplication();
break;
case 3:
transpose();
break;
default:
cout<<"Invalid Choice";
}
getch();
}

Practical 3 : Linked List Operation
1. Write a program to create a Single Linked List and display the node
elements in reverse order.
Code:

#include<iostream.h>
#include<conio.h>
#include<stdlib.h>
class node
{
int data;
node*next;
public:
void create();
void display();
void reverse();
};
node*temp=NULL,*ptr=NULL,*start=NULL,*ptt=NULL;
int t,count=0;
void node::create()
{
int y,z;
if(start!=NULL)
cout<<"\nLink list already created";
else
{
cout<<"Enter more node(1/10):";
cin>>y;
for(z=1;z<=y;z++)
{
temp = new node;
temp -> next = NULL;
cout<<"Enter a value:";
cin>>temp -> data;

if(start==NULL)
{
start=ptr=temp;
}
else
{
ptr -> next = temp;
ptr = temp;
}
}
}
}
void node::display()
{
if(start==NULL)
cout<<"\n There are no elements in the list. ";
else
{
cout<<"\n List elements";
cout<<"\n--------------------\n";
temp=start;
while(temp!=NULL)
{
cout<<" "<<temp->data;
temp=temp->next;
}
}
}
void node::reverse()
{
ptr=start;
temp=NULL;
ptt=NULL;
while(ptr!=NULL)
{
temp=ptr->next;
ptr->next=ptt;
ptt=ptr;
ptr=temp;
}
start=ptt;
node n;
n.display();
getch();
}
void main()
{

int ch;
node n;
clrscr();
while(1)
{
cout<<"\n\nMAIN MENU\n";
cout<<"\n1.Create List";
cout<<"\n2.Display List";
cout<<"\n3.Reverse List";
cout<<"\n4.Exit";
cout<<"\nEnter your choice:";
cin>>ch;
switch(ch)
{
case 1:
n.create();
break;
case 2:
n.display();
break;
case 3:
n.reverse();
break;
case 4:
exit(0);
default:
cout<<"\n Invalid choice";
break;
getch();
}
}
}

Output: (The below four image is a single output.)

2. Write a program to display Single Linked List nodes or elements.
Code:

#include <iostream.h>
#include <conio.h>
// Creating a node
class Node
{
public:
int value;
Node* next;
};
int main()
{
Node* head;
Node* one = NULL;
Node* two = NULL;
Node* three = NULL;
// allocate 3 nodes in the heap
one = new Node();
two = new Node();
three = new Node();
// Assign value values
one->value = 1;
two->value = 2;
three->value = 3;
// Connect nodes
one->next = two;
two->next = three;
three->next = NULL;
// print the linked list value
head = one;
while (head != NULL)
{
cout << head->value<<" ";
head = head->next;
}
getch();
return 0;
}

Output:

3. Write a program to create a Double Linked List and display the node
elements in reverse order.

Code:
#include<iostream.h>
#include<conio.h>
struct Node
{
int data;
struct Node *next;
Node(int data)
{
this->data = data;
next = NULL;
}
};
struct LinkedList
{
Node *head;
LinkedList()
{
head = NULL;
}
void reverse()
{
Node *current = head;
Node *prev = NULL, *next = NULL;
while(current!=NULL)
{
next=current->next;
current->next=prev;
prev=current;
current=next;
}
head = prev;
}
void print()
{
struct Node *temp = head;
while(temp!=NULL)
{
cout<< temp->data <<" ";
temp = temp->next;
}
}
void push(int data)
{
Node *temp = new Node(data);
temp -> next = head;
head = temp;
}

};
int main()
{
clrscr();
LinkedList list1;
list1.push(20);
list1.push(4);
list1.push(15);
list1.push(85);
cout<<"Given Linked List\n";
list1.print();
cout<<"\nReversed Linked List\n";
list1.reverse();
list1.print();
getch();
return 0;
}

Output:

For Further Codes, the code editor required is Visual Studio Code.
To setup the VS Code, follow the below steps:
1. Install VSCode
2. Install mingw.exe or extract the below zip file in C: drive.

3. Set environment path (C:\MinGW\bin)
4. Open VSCode, install C/C++ extension and Code Runner Extension

5. Go to settings ---> Text Editor ----> Code Actions on Save ----> Edit in
setting.json

6. Type:
"code-runner.runInTerminal": true,

Practical 4 : Stack Operation
1. Write a program to implement the concept of Stack with Push, Pop,
Display and Exit operation.
Code:

#include<iostream.h>
#include<conio.h>
#include<stdlib.h>
int stack[100],n=100,top=-1;
void push(int val)
{
if(top>=n-1)
{
cout<<"Stack Overflow";
}
else
{
top++;
stack[top] = val;
}
}
void pop()
{
if(top<=-1)
{
cout<<"Stack Underflow";
}
else
{
cout<<"The popped element is "<<stack[top];
top--;
}
}
void display()
{
if(top>=0)
{
cout<<"\nStack elements are :";
for(int i=top;i>=0;i--)
{
cout<<stack[i]<<" ";
}
}
else
{
cout<<"\nStack is Empty";
}
}
void main()
{
clrscr();
int ch,val;
cout<<"1) Push in Stack \n2)Pop from Stack \n3)Display the Stack \n4)Exit";
do

{
cout<<"\nEnter choice: ";
cin>>ch;
switch(ch)
{
case 1:
cout<<"Enter value to be pushed: ";
cin>>val;
push(val);
break;
case 2:
pop();
break;
case 3:
display();
break;
case 4:
exit(0);
default:
cout<<"\nInvalid Choice";
}
}
while(ch!=4);
getch();
}

Output:

2. Write a C++ program to convert an infix expression to postfix.
Code:
#include <iostream>
#include <stack>
using namespace std;
int priority (char alpha){
if(alpha == '+' || alpha =='-')
return 1;
if(alpha == '*' || alpha =='/')
return 2;
if(alpha == '^')
return 3;

return 0;
}
string convert(string infix)

{
int i = 0;
string postfix = "";
// using inbuilt stack< > from C++ stack library
stack <int>s;
while(infix[i]!='\0')
{
// if operand add to the postfix expression
if(infix[i]>='a' && infix[i]<='z'|| infix[i]>='A'&& infix[i]<='Z')
{
postfix += infix[i];
i++;
}
// if opening bracket then push the stack
else if(infix[i]=='(')
{
s.push(infix[i]);
i++;
}
// if closing bracket encounted then keep popping from stack until
// closing a pair opening bracket is not encountered
else if(infix[i]==')')
{
while(s.top()!='('){
postfix += s.top();
s.pop();
}
s.pop();
i++;
}
else
{
while (!s.empty() && priority(infix[i]) <= priority(s.top())){
postfix += s.top();
s.pop();
}
s.push(infix[i]);
i++;
}
}
while(!s.empty()){
postfix += s.top();
s.pop();
}

cout << "Postfix Expression: " << postfix; //it will print postfix conversion
return postfix;
}

int main()
{
string infix_exp, post_exp;
cout<<"Enter Infix Expression: "<<endl;
cin>>infix_exp;
// stack<char> stack;
cout<<"\nInfix Expression: "<<infix_exp<<endl;
//string infix = "((a+(b*c))-d)";
post_exp = convert(infix_exp);
return 0;
}

Output:

3. Write a program to convert an infix to prefix.
Code:
#include <iostream>
#include <stack>
#include<algorithm>
using namespace std;
bool isOperator(char c)
{
if (c == '+' || c == '-' || c == '*' || c == '/' || c == '^') {
return true;
}
else {
return false;
}
}
int precedence(char c)
{
if (c == '^')
return 3;

else if (c == '*' || c == '/')
return 2;
else if (c == '+' || c == '-')
return 1;
else
return -1;
}
string InfixToPrefix(stack<char> s, string infix)
{
string prefix;
reverse(infix.begin(), infix.end());
for (int i = 0; i < infix.length(); i++) {
if (infix[i] == '(') {
infix[i] = ')';
}
else if (infix[i] == ')') {
infix[i] = '(';
}
}
for (int i = 0; i < infix.length(); i++) {
if ((infix[i] >= 'a' && infix[i] <= 'z') || (infix[i] >= 'A' && infix[i] <=
'Z')) {
prefix += infix[i];
}
else if (infix[i] == '(') {
s.push(infix[i]);
}
else if (infix[i] == ')') {
while ((s.top() != '(') && (!s.empty())) {
prefix += s.top();
s.pop();
}
if (s.top() == '(') {
s.pop();
}
}
else if (isOperator(infix[i])) {
if (s.empty()) {
s.push(infix[i]);
}
else {
if (precedence(infix[i]) > precedence(s.top())) {
s.push(infix[i]);
}
else if ((precedence(infix[i]) == precedence(s.top()))
&& (infix[i] == '^')) {

while ((precedence(infix[i]) == precedence(s.top()))
&& (infix[i] == '^')) {
prefix += s.top();
s.pop();
}
s.push(infix[i]);
}
else if (precedence(infix[i]) == precedence(s.top())) {
s.push(infix[i]);
}
else {
while ((!s.empty()) && (precedence(infix[i]) <
precedence(s.top()))) {
prefix += s.top();
s.pop();
}
s.push(infix[i]);
}
}
}
}
while (!s.empty()) {
prefix += s.top();
s.pop();
}
reverse(prefix.begin(), prefix.end());
return prefix;
}
int main()
{
string infix, prefix;
cout << "Enter a Infix Expression : ";
cin >> infix;
stack<char> stack;
cout << "INFIX EXPRESSION: " << infix << endl;
prefix = InfixToPrefix(stack, infix);
cout << endl;
cout<<"PREFIX EXPRESSION: " << prefix;
return 0;
}

Output:

4. Write a program to convert an infix expression to postfix and prefix.
Code:
#include <bits/stdc++.h>
#include<iostream>
#include<stack>
#include<algorithm>
using namespace std;
bool isOperator(char c) {
return (!isalpha(c) && !isdigit(c));
}
int getPriority(char C) {
if (C == '-' || C == '+')
return 1;
else if (C == '*' || C == '/')
return 2;
else if (C == '^')
return 3;
return 0;
}
string infixToPostfix(string infix) {
infix = '(' + infix + ')';
int l = infix.size();
stack < char > char_stack;
string output;
for (int i = 0; i < l; i++) {
// If the scanned character is an
// operand, add it to output.
if (isalpha(infix[i]) || isdigit(infix[i]))
output += infix[i];
// If the scanned character is an
// â€˜(â€˜, push it to the stack.
else if (infix[i] == '(')
char_stack.push('(');

// If the scanned character is an
// â€˜)â€™, pop and output from the stack
// until an â€˜(â€˜ is encountered.
else if (infix[i] == ')') {
while (char_stack.top() != '(') {
output += char_stack.top();
char_stack.pop();
}
// Remove '(' from the stack
char_stack.pop();
}
// Operator found
else {
if (isOperator(char_stack.top())) {
if (infix[i] == '^') {
while (getPriority(infix[i]) <= getPriority(char_stack.top())) {
output += char_stack.top();
char_stack.pop();
}
} else {
while (getPriority(infix[i]) < getPriority(char_stack.top())) {
output += char_stack.top();
char_stack.pop();
}
}
// Push current Operator on stack
char_stack.push(infix[i]);
}
}
}
while (!char_stack.empty()) {
output += char_stack.top();
char_stack.pop();
}
return output;
}
string infixToPrefix(string infix) {
/* Reverse String
* Replace ( with ) and vice versa
* Get Postfix
* Reverse Postfix * */
int l = infix.size();

// Reverse infix
reverse(infix.begin(), infix.end());
// Replace ( with ) and vice versa
for (int i = 0; i < l; i++) {
if (infix[i] == '(') {
infix[i] = ')';
i++;
} else if (infix[i] == ')') {
infix[i] = '(';
i++;
}
}
string prefix = infixToPostfix(infix);
// Reverse postfix
reverse(prefix.begin(), prefix.end());
return prefix;
}
int main() {
string s = ("(p+q)*(c-d)");
cout << "Infix expression: " << s << endl;
cout << "Prefix Expression: " << infixToPrefix(s) << endl;
return 0;
}

Output:

Practical 5 : Queue Operation
1. Write a program to implement the concept of Queue with Insert
(Enqueue), Delete (Dequeue), Display and Exit operation.
Code:
#include<iostream.h>
#include<conio.h>
#include<stdlib.h>
int queue[100], n=100, front= -1, rear= -1;
void Enqueue()
{
int val;
if (rear == n - 1)
cout<<"Queue Overflow";
else
{
if (front == - 1)
front = 0;
cout<<"Insert the element in queue : ";
cin>>val;
rear++;
queue[rear] = val;
}
}

void Dequeue()
{
if(front == -1)
{
cout<<"Queue Underflow";
return;
}
else
{
cout<<"The element deleted from queue is "<<queue[front];
front++;
}
}
void Display()
{
if(front== -1)
{
cout<<"Queue is Empty.";
}
else
{
cout<<"\nQueue Elements are: ";
for(int i=front;i<=rear;i++)
{
cout<<queue[i]<<" ";
}
}
}
void main()
{
clrscr();
int ch;
cout<<"********Ma
