Practical no.1: Object Orient Programs on Variables, datatypes,

Conditional statement and Loops

Q.1 Write a Java program to demonstrate variables and datatypes

public class pract1a{

public static void main(String[] args)

{

int age = 25;

double height = 5.9;

char gender = 'M';

boolean isStudent = true;

System.out.println("Age: "+age);

System.out.println("Height: "+height);

System.out.println("Gender: "+gender);

System.out.println("Is Student:"+isStudent);

}

}

Q.2 Write a Java program to demonstrate conditional statement

import java.util.Scanner;

public class pract1b{

public static void main(String[] args)

{

Scanner scanner = new Scanner(System.in);

System.out.println("Enter Your age: ");

int age = scanner.nextInt();
if(age>=18)

{

System.out.println("Your are eligible to vote");

}

else

{

System.out.println("You are not eligible to vote");

}

scanner.close();

}

}

//Q.3 Write a Java program to demonstrate looping statement

public class pract1c{

public static void main(String[] args)

{

System.out.println("Printing numbers from 1 to 5 using for loop");

for(int i = 1; i<=5; i++)

{

System.out.println(i+ " ");

}

System.out.println();

System.out.println("Printing numbers from 1 to 5 using while loop");

int count = 1;
while(count<=5)

{

System.out.println(count+ " ");

count++;

}

System.out.println();

System.out.println("Printing numbers from 1 to 5 using do-while loop");

int num = 1;

do{

System.out.println(num+ " ");

num++;

}while(num<=5);

}

}

Practical no.2: Programs on Inheritance

Q.1 Write a Program to demonstrate Single Inheritance.

// Parent class

class Animal {

 void eat() {

 System.out.println("Eating...");

 }

}

// Child class inheriting from Animal

class Dog extends Animal {

 void bark() {

 System.out.println("Barking...");

 }

}

// Main class

public class Main {

 public static void main(String[] args) {

 Dog dog = new Dog();

 dog.eat(); // Inherited from Animal class

 dog.bark(); // Method of Dog class

 }

}
Q.2 Write a Program to demonstrate Multiple Inheritance(through Interfaces)

// Interface1

interface Walks {

 void walk();

}

// Interface2

interface Swims {

 void swim();

}

// Class implementing both interfaces

class Amphibian implements Walks, Swims {

 public void walk() {

 System.out.println("Walking...");

 }

 public void swim() {

 System.out.println("Swimming...");

 }

}

// Main class

public class Main {

 public static void main(String[] args) {

 Amphibian frog = new Amphibian();

 frog.walk(); // Method from Walks interface
frog.swim(); // Method from Swims interface

 }

}

Q.3 Write a Program to demonstrate Multilevel Inheritance

// Grandparent class

class Animal {

 void eat() {

 System.out.println("Eating...");

 }

}

// Parent class inheriting from Animal

class Dog extends Animal {

 void bark() {

 System.out.println("Barking...");

 }

}

// Child class inheriting from Dog

class Labrador extends Dog {

 void play() {

 System.out.println("Playing fetch...");

 }

}
// Main class

public class Main {

 public static void main(String[] args) {

 Labrador labrador = new Labrador();

 labrador.eat(); // Inherited from Animal class

 labrador.bark(); // Inherited from Dog class

 labrador.play(); // Method of Labrador class

 }

}
